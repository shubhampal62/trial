--creating tables for USE CASE 2

--PartnerPrograms

CREATE TABLE partner_programs (
program_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
program_name VARCHAR2(255) NOT NULL,
program_type VARCHAR2(50) NOT NULL,   -- e.g., gift_card, discount, cashback
description CLOB,
conversion_rate NUMBER(10,4) NOT NULL,
minimum_points INT NOT NULL
);

--Referrals 
CREATE TABLE referrals (
referral_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
referrer_user_id INT NOT NULL,
referred_email VARCHAR2(255) NOT NULL,
referral_code VARCHAR2(100) NOT NULL,
status VARCHAR2(20) NOT NULL,          -- e.g., pending, completed
reward_points INT NOT NULL,
CONSTRAINT fk_referrer_user FOREIGN KEY (referrer_user_id) REFERENCES users(user_id)
);



-- Table to store user rewards earned through budgeting actions
CREATE TABLE rewards (
    reward_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    budget_id NUMBER NOT NULL,
    points_earned NUMBER DEFAULT 0,
    cashback_earned NUMBER(10, 2) DEFAULT 0,
    earned_date DATE NOT NULL,
    reason VARCHAR2(255)
    -- Foreign key constraints (will be used later on when all tables have been created)
    -- CONSTRAINT fk_rewards_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    -- CONSTRAINT fk_rewards_budget FOREIGN KEY (budget_id) REFERENCES budget_plans(budget_id)
);


-- Table to track individual user savings goals
CREATE TABLE savings_goals (
    goal_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    goal_name VARCHAR2(255) NOT NULL,
    target_amount NUMBER(10, 2) NOT NULL,
    current_amount NUMBER(10, 2) DEFAULT 0 NOT NULL,
    target_date DATE NOT NULL
    -- Foreign key constraint (will be used later on when all the tables have been created)
    -- CONSTRAINT fk_savings_user FOREIGN KEY (user_id) REFERENCES users(user_id)
);


--Notification Settings
--Creation of the table 'notification_settings'
CREATE TABLE notification_settings (
    setting_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER UNIQUE NOT NULL,
    notification_frequency VARCHAR2(20) NOT NULL,
    notification_channel VARCHAR2(20) NOT NULL
);

--Checking the table fields
DESC notification_settings;

--Noticed the field user_id as Null so altered the field
ALTER TABLE notification_settings
MODIFY user_id NUMBER NOT NULL;

--Checking the table fields
DESC notification_settings;


--Categories
--Created the table categories
CREATE TABLE categories (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR2(100) NOT NULL,
    description VARCHAR2(500)
);

--Checking the fields of categories table
DESC categories;

--Notification
--Created the table notifications
CREATE TABLE notifications (
    notification_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    budget_id NUMBER,
    notification_type VARCHAR2(50),
    message VARCHAR2(4000),
    sent_date DATE
);

--Checking the fields for the table notifications
DESC notifications;

-- Table for storing budget plans
CREATE TABLE budgetplans (
  budget_id number(10),
  user_id number(10),
  category_id number(10),
  budget_amount number(10,2),
  period_type varchar(50),
  start_date date,
  end_date date,
  constraint pk_bp primary key (budget_id)
);

--Table for storing transactions
CREATE TABLE transactions (
  transaction_id number(10),
  user_id number(10),
  category_id number(10),
  budget_id number(10),
  account_id number(10),
  amount number(10,2),
  transaction_date date,
  description varchar(50),
  merchant_name varchar(50),
  constraint pk_txns primary key (transaction_id)
);


-- Samridh 

-- Create accounts table
CREATE TABLE accounts (
    account_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    account_type VARCHAR(255),
    account_name VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create reward_redemptions table
CREATE TABLE reward_redemptions (
    redemption_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    program_id INT,
    points_redeemed INT,
    redemption_value DECIMAL(10,2),
    redemption_code VARCHAR(255),
    status VARCHAR(255),
    redeemed_date DATE,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (program_id) REFERENCES partner_programs(program_id)
);